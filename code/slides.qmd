---
title: "Basketball Analytics with R"
author: "Mathew Chandy"
execute:
  echo: true
  format: revealjs
  embed-resources: true
---

# sportsdataverse

The SportsDataverse is a collection of R packages that can be used for a 
variety of sports. Below are the SportsDataverse packages that can be used for 
basketball analytics:

* [hoopR](https://hoopr.sportsdataverse.org)
* [wehoop](https://wehoop.sportsdataverse.org/)
* [sportyR](https://sportyr.sportsdataverse.org/)

## Installing the collection

```{r include = FALSE}
Sys.setenv("VROOM_CONNECTION_SIZE" = 500000)
```

```{r message = FALSE, warning = FALSE, output = FALSE}
if (!requireNamespace('devtools', quietly = TRUE)){
  install.packages('devtools')
}
devtools::install_github(repo = "sportsdataverse/sportsdataverse-R")
```

## hoopR

Can be used for men's basketball analysis for the NBA and the NCAA.

## BasketballAnalyzeR: Assist Network
```{r}
library(BasketballAnalyzeR)
PbP <- PbPmanipulation(PbP.BDB)
PbP.BOS <- subset(PbP, team == "BOS")
out <- assistnet(PbP.BOS)
plot(out, layout = "circle", edge.thr = 30, node.col = "FGM_ASTp", 
     node.size = "ASTPTS")
```

## hoopR: Clustering
```{r, include = FALSE}
library(hoopR)
library(tidyverse)
fg_pct_stats <- nba_leaguedashptteamdefend(league_id = '00', 
                           season = year_to_season(most_recent_nba_season() - 1))[[1]] %>% 
  select(TEAM_ABBREVIATION, D_FG_PCT, NORMAL_FG_PCT) %>% 
  as.data.frame()
rownames(fg_pct_stats) <- fg_pct_stats$TEAM_ABBREVIATION
fg_pct_stats <- fg_pct_stats %>% select(-TEAM_ABBREVIATION) %>% 
  mutate(D_FG_PCT = as.numeric(D_FG_PCT),
                               NORMAL_FG_PCT = as.numeric(NORMAL_FG_PCT))
```

```{r}
library(factoextra)
res.km <- kmeans(fg_pct_stats, centers = 3)
fviz_cluster(res.km, data = fg_pct_stats,
             palette = c("#2E9FDF", "#00AFBB", "#E7B800"), 
             geom = "text",
             ellipse.type = "convex", 
             ggtheme = theme_bw())
```

## wehoop
```{r, warning = FALSE}
library(wehoop)
```

## nbastatR and sportyR
```{r, include = FALSE}
devtools::install_github("abresler/nbastatR")
library(nbastatR)
library(sportyR)

width = 50
height = 94 / 2
key_height = 19
inner_key_width = 12
outer_key_width = 16
backboard_width = 6
backboard_offset = 4
neck_length = 0.5
hoop_radius = 0.75
hoop_center_y = backboard_offset + neck_length + hoop_radius
three_point_radius = 23.75
three_point_side_radius = 22
three_point_side_height = 14

gsw <- teams_shots(teams = "Golden State Warriors", seasons = 2023, 
                   season_types = "Playoffs")

curry <- gsw %>% filter(namePlayer == "Stephen Curry") %>% 
  mutate(x = as.numeric(as.character(locationX)) / 10, 
         y = as.numeric(as.character(locationY)) / 10 - height + hoop_center_y,
         z = ifelse(typeEvent == "Missed Shot", 1, 0),
         factor_x = as.character(floor(x) %% 10),
         factor_y = as.character(floor(y) %% 10))
```
```{r}
geom_basketball(league = "NBA", rotation = 270, display_range = "offense") +
  stat_binhex(data = curry, aes(x, y))
```

# March Madness
```{r}
library(hoopR)
library(data.tree)
library(treemap)
tournament23 <- load_mbb_schedule(seasons = 2023) %>% 
  filter(grepl("Men's Basketball Championship", notes_headline) & 
           !grepl("First Four", notes_headline)) %>% 
  select(notes_headline, home_abbreviation, home_conference_id, home_score, 
         home_winner, home_current_rank, home_linescores, home_records,
         away_abbreviation, away_conference_id, away_score, away_winner,
         away_current_rank, away_linescores, away_records
         ) %>% 
  mutate(final_four = case_when(grepl("Midwest", notes_headline) |
                                grepl("West", notes_headline) |
                                home_abbreviation == "CONN" & 
                                away_abbreviation == "MIA" ~ "midwest_west",
                                grepl("South", notes_headline) |
                                grepl("East", notes_headline) |
                                home_abbreviation == "SDSU" &
                                away_abbreviation == "FAU" ~ "south_east"),
         # The pairings are different for each year
         elite_eight = case_when(
                            grepl("Midwest", notes_headline) ~ "midwest",
                            grepl("South", notes_headline) ~ "south",
                            grepl("West", notes_headline) ~ "west",
                            grepl("East", notes_headline) ~ "east"),
         sweet_sixteen = ifelse(grepl("Sweet 16", notes_headline) |
                                grepl("2nd Round", notes_headline) |
                                grepl("1st Round", notes_headline),
                                case_when(
                                  home_current_rank %in% 
                                    c(1, 4, 5, 8, 9, 12) ~ 1,
                                  home_current_rank %in% 
                                    c(2, 3, 6, 7, 10, 11) ~ 2), NA),
         round_of_32 = ifelse(grepl("2nd Round", notes_headline) |
                              grepl("1st Round", notes_headline),
                              case_when(
                                 home_current_rank %in% c(1, 8, 9) ~ 1,
                                 home_current_rank %in% c(2, 7, 10) ~ 2,
                                 home_current_rank %in% c(3, 6, 11) ~ 3,
                                 home_current_rank %in% c(4, 5, 12) ~ 4), NA),
         round_of_64 = ifelse(grepl("1st Round", notes_headline),
                         home_current_rank,
                         NA)
         )


start23 <- tournament23 %>% 
  na.omit() %>% 
  mutate(home_records = str_extract_all(home_records, "\\d+"),
         away_records = str_extract_all(away_records, "\\d+"),
         home_overall_wins = 
           as.numeric(sapply(home_records, function(x) x[[1]])),
         home_overall_losses = 
           as.numeric(sapply(home_records, function(x) x[[2]])),
         away_overall_wins = 
           as.numeric(sapply(away_records, function(x) x[[1]])),
         away_overall_losses = 
           as.numeric(sapply(away_records, function(x) x[[2]])),
         home_p = as.numeric(home_overall_wins) / 
           (as.numeric(home_overall_wins) + as.numeric(home_overall_losses)),
         away_p = as.numeric(away_overall_wins) / 
           (as.numeric(away_overall_wins) + as.numeric(away_overall_losses)))
start23$path <- paste("national", 
                            start23$final_four, 
                            start23$elite_eight,
                            start23$sweet_sixteen,
                            start23$round_of_32,
                            start23$round_of_64,
                            sep = "/")
start23 <- arrange(start23, path)
```

```{r}
log5 <- function(p, q) p * (1 - q) / (p + q - 2 * p * q)
simulate_tournament <- function(df) {
  results <- df %>% select(path, home_abbreviation, away_abbreviation, home_p,
                            away_p)
  path <- unique(df$path)
  while (nrow(df) > 1) {
    current_matches <- df[df$path == path, ]
  
    winners <- as.list(apply(current_matches, 1, function(match) {
      winner <- sample(c("home", "away"), size = 1, prob = c(match["home_p"], match["away_p"]))
      winner <- c(match[paste(winner, "_abbreviation", sep = "")], match[paste(winner, "_p", 
                                                                  sep = "")])
      winner
    }))
    
    winners_df <- data.frame(winner = unlist(winners))
    
    winners_df <- split(winners_df$winner, 
                        as.integer(gl(nrow(winners_df), 2, nrow(winners_df))))
    
    winners_df <- as.data.frame(do.call(rbind, winners_df))
    
    colnames(winners_df) <- c("winner", "p")
    
    df <- cbind(current_matches, winners_df) %>% 
      mutate(path = sub("/[^/]*$", "", path))
    
    df <- df %>%
      group_by(path) %>%
      summarize(home_abbreviation = first(winner),
                away_abbreviation = nth(winner, 2),
                home_p = first(p),
                away_p = nth(p, 2))
    results <- rbind(results, df)
    path <- unique(df$path)
  }
  
  champion <- sample(c(results[63, 2], results[63, 3]), 1, 
                     prob = c(results[63, 4], results[63, 5]))
  
  
  results <- rbind(results, list("champion", as.character(champion), NA, NA, NA))
  
  new_vector <- c()

  for (i in 33:64) {
    new_vector <- c(new_vector, results[i, 2], results[i, 3])
  }
  return(new_vector)
}

result <- simulate_tournament(start23)
```





```{r}
result <- replicate(100, simulate_tournament(start23))
most_common_values <- function(vectors) {
  ws <- c()
  ls <- c()
  for (i in 1:dim(vectors)[1]) {
    winners <- sort(table(unlist(vectors[i,])), decreasing = TRUE)
    ws <- c(ws, names(winners)[1])
    ls <- c(ls, names(winners)[2])
  }
  
  for (i in rev(ws)) {
    index = 0
    if (i %in% ws[1:32]) {
      index <- which(ws == i)[1]
    }
    else {
      index <- which(ls == i)[i]
    }
    ws[index] = i
    ws[32 + ceiling(index / 2)] = i
    ws[48 + ceiling(index / 4)] = i
    ws[56 + ceiling(index / 8)] = i
    ws[60 + ceiling(index / 16)] = i
    ws[62 + ceiling(index / 32)] = i
  }
  
  return(ws)
}

asdf <- most_common_values(result)

calculate_mode <- function(x) {
  unique_x <- unique(x)
  freq <- tabulate(match(x, unique_x))
  mode <- unique_x[which.max(freq)]
  return(mode)
}

modes <- apply(result, 1, calculate_mode)
```





