---
title: "Basketball Analytics with R"
author: "Mathew Chandy"
execute:
  echo: true
  format: revealjs
  embed-resources: true
---

# sportsdataverse

The SportsDataverse is a collection of R packages that can be used for a 
variety of sports. Below are the SportsDataverse packages that can be used for 
basketball analytics:

* [hoopR](https://hoopr.sportsdataverse.org)
* [wehoop](https://wehoop.sportsdataverse.org/)
* [sportyR](https://sportyr.sportsdataverse.org/)

## Installing the collection
```{r message = FALSE, warning = FALSE, ouput = FALSE}
if (!requireNamespace('devtools', quietly = TRUE)){
  install.packages('devtools')
}
devtools::install_github(repo = "sportsdataverse/sportsdataverse-R")
```

## hoopR

Can be used for men's basketball analysis for the NBA and the NCAA.

### hoopR: Assist Tracker
```{r}
library(tidyverse)
library(hoopR)
tatum_id <- 
  nba_commonallplayers(
    league_id = '00', 
    season = year_to_season(most_recent_nba_season() - 1))[[1]] %>% 
  filter(DISPLAY_FIRST_LAST == 'Jayson Tatum') %>% 
  select(PERSON_ID) %>% 
  as.character()
tatum_passes <- 
  nba_playerdashptpass(
    player_id = tatum_id, 
    season = year_to_season(most_recent_nba_season() - 1))
tatum_passes_made <- tatum_passes[[1]]
tatum_passes_made[c('pass_to_last', 'pass_to_name')] <- 
  str_split_fixed(tatum_passes_made$PASS_TO, ", ", 2)
ggplot(data = tatum_passes_made, aes(x = pass_to_last, y = PASS)) +
  geom_bar(stat="identity")+
  scale_fill_brewer(palette="Paired")+
  theme_minimal() 
  
```

```{r}
tatum_passes_received <- tatum_passes[[2]]
```

## wehoop
```{r, warning = FALSE}
library(wehoop)
```

## sportyR
```{r}
devtools::install_github("abresler/nbastatR")
library(nbastatR)
library(sportyR)

width = 50
height = 94 / 2
key_height = 19
inner_key_width = 12
outer_key_width = 16
backboard_width = 6
backboard_offset = 4
neck_length = 0.5
hoop_radius = 0.75
hoop_center_y = backboard_offset + neck_length + hoop_radius
three_point_radius = 23.75
three_point_side_radius = 22
three_point_side_height = 14

gsw <- teams_shots(teams = "Golden State Warriors", seasons = 2023, 
                   season_types = "Playoffs")

curry <- gsw %>% filter(namePlayer == "Stephen Curry") %>% 
  mutate(x = as.numeric(as.character(locationX)) / 10, 
         y = as.numeric(as.character(locationY)) / 10 - height + hoop_center_y,
         z = ifelse(typeEvent == "Missed Shot", 1, 0),
         factor_x = as.character(floor(x) %% 10),
         factor_y = as.character(floor(y) %% 10))


geom_basketball(league = "NBA", rotation = 270, display_range = "offense") +
  geom_point(data = curry, aes(x, y))


geom_basketball(league = "NBA", rotation = 270, display_range = "offense") +
  stat_binhex(data = curry, aes(x, y))
```


# March Madness
```{r}
library(hoopR)
library(data.tree)
library(treemap)
tournament23 <- load_mbb_schedule(seasons = 2023) %>% 
  filter(grepl("Men's Basketball Championship", notes_headline) & 
           !grepl("First Four", notes_headline)) %>% 
  select(notes_headline, home_abbreviation, home_conference_id, home_score, 
         home_winner, home_current_rank, home_linescores, home_records,
         away_abbreviation, away_conference_id, away_score, away_winner,
         away_current_rank, away_linescores, away_records
         ) %>% 
  mutate(final_four = case_when(grepl("Midwest", notes_headline) |
                                grepl("West", notes_headline) |
                                home_abbreviation == "CONN" & 
                                away_abbreviation == "MIA" ~ "midwest_west",
                                grepl("South", notes_headline) |
                                grepl("East", notes_headline) |
                                home_abbreviation == "SDSU" &
                                away_abbreviation == "FAU" ~ "south_east"),
         # The pairings are different for each year
         elite_eight = case_when(
                            grepl("Midwest", notes_headline) ~ "midwest",
                            grepl("South", notes_headline) ~ "south",
                            grepl("West", notes_headline) ~ "west",
                            grepl("East", notes_headline) ~ "east"),
         sweet_sixteen = ifelse(grepl("Sweet 16", notes_headline) |
                                grepl("2nd Round", notes_headline) |
                                grepl("1st Round", notes_headline),
                                case_when(
                                  home_current_rank %in% 
                                    c(1, 4, 5, 8, 9, 12) ~ 1,
                                  home_current_rank %in% 
                                    c(2, 3, 6, 7, 10, 11) ~ 2), NA),
         round_of_32 = ifelse(grepl("2nd Round", notes_headline) |
                              grepl("1st Round", notes_headline),
                              case_when(
                                 home_current_rank %in% c(1, 8, 9) ~ 1,
                                 home_current_rank %in% c(2, 7, 10) ~ 2,
                                 home_current_rank %in% c(3, 6, 11) ~ 3,
                                 home_current_rank %in% c(4, 5, 12) ~ 4), NA),
         round_of_64 = ifelse(grepl("1st Round", notes_headline),
                         home_current_rank,
                         NA)
         )


start23 <- tournament23 %>% 
  na.omit() %>% 
  mutate(home_records = str_extract_all(home_records, "\\d+"),
         away_records = str_extract_all(away_records, "\\d+"),
         home_overall_wins = 
           as.numeric(sapply(home_records, function(x) x[[1]])),
         home_overall_losses = 
           as.numeric(sapply(home_records, function(x) x[[2]])),
         away_overall_wins = 
           as.numeric(sapply(away_records, function(x) x[[1]])),
         away_overall_losses = 
           as.numeric(sapply(away_records, function(x) x[[2]])),
         home_p = as.numeric(home_overall_wins) / 
           (as.numeric(home_overall_wins) + as.numeric(home_overall_losses)),
         away_p = as.numeric(away_overall_wins) / 
           (as.numeric(away_overall_wins) + as.numeric(away_overall_losses)))
start23$pathString <- paste("national", 
                            start23$final_four, 
                            start23$elite_eight,
                            start23$sweet_sixteen,
                            start23$round_of_32,
                            start23$round_of_64,
                            sep = "/")
bracket <- as.Node(start23)
print(bracket, "home_abbreviation", "home_p", "away_abbreviation", "away_p")
```

```{r}
bracket$children
```

```{r}
log5 <- function(p, q) p * (1 - q) / (p + q - 2 * p * q)
exp_winner <- function(bracket, prob_func) {
  # base case
  game < bracket$root
  names <- c(game$home_abbreviation, game$away_abbreviation) # team names
  prob_reach <- c(1, 1) # probability that each possible team reaches that game
  prob_win <- c(prob_func())
  
  p
  for (child in game$children) {
    if (length(child$attributes) != 0) {
      child$
    } 
    child
  }
}
```






