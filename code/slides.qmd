---
title: "Basketball Analytics with R"
author: "Mathew Chandy"
execute:
  echo: true
  format: revealjs
  embed-resources: true
---

## History of NBA Box Score

* 1946-1947: Inaugural season

PTS, AST, FG/FGM, FGA, FG\%, FTM, FTA, FT\%, PF

* 1950-1951: 
TRB/REB

* 1951-1952:
MP

* 1973-1974:
ORB/OREB, DRB/DREB, STL, BLK

* 1977-1978:
TOV

* 1979-1980: Three-point line is introduced to the NBA.
2P/2PM, 2PA, 3P/3PM, 3PA

* 1996-1997: Shot distance tracking is introduced.

# Acquiring Data
## Basketball Reference

```{r include = FALSE}
library(webshot)
webshot::install_phantomjs()
webshot("https://www.basketball-reference.com", "r.png", cliprect = "viewport")
```
## Loading Data through Basketball Reference


![Basketball Reference.](../reference.png)


## Packages for NBA Analysis

The SportsDataverse is a collection of R packages that can be used for a 
variety of sports. Below are the SportsDataverse packages that can be used for 
basketball analytics:

* [hoopR](https://hoopr.sportsdataverse.org)

* [wehoop](https://wehoop.sportsdataverse.org/)
* [sportyR](https://sportyr.sportsdataverse.org/)

```{r include = FALSE}
Sys.setenv("VROOM_CONNECTION_SIZE" = 500000)
```

```{r include = FALSE, message = FALSE, warning = FALSE, output = FALSE}
if (!requireNamespace('devtools', quietly = TRUE)){
  install.packages('devtools')
}
devtools::install_github(repo = "sportsdataverse/sportsdataverse-R")
```

## hoopR: Play-By-Play Data




## Four Factors
```{r}
library(hoopR)
TEAM <- nba_leaguegamelog(league_id = '00', season = year_to_season(
  most_recent_nba_season() - 1))$LeagueGameLog %>% 
  rename(TEAM = TEAM_ABBREVIATION) %>% 
  separate(MIN, c("MIN", "SEC"), ":") %>% 
  group_by(TEAM) %>% 
  reframe(P2A = sum(as.numeric(FGM) - as.numeric(FG3M)), 
         P2M = sum(as.numeric(FGA) - as.numeric(FG3A)), 
         P3A = sum(as.numeric(FG3A)), P3M = sum(as.numeric(FG3M)),
         FTA = sum(as.numeric(FTA)), FTM = sum(as.numeric(FTM)), 
         OREB = sum(as.numeric(OREB)), DREB = sum(as.numeric(DREB)), 
         TOV = sum(as.numeric(TOV)),
         MIN = sum(as.numeric(MIN)))
OPP <- nba_leaguegamelog(league_id = '00', season = year_to_season(
  most_recent_nba_season() - 1))$LeagueGameLog %>% 
  separate(MATCHUP, c("OPP", "vs", "TEAM"), " ") %>% 
  separate(MIN, c("MIN", "SEC"), ":") %>% 
  group_by(TEAM) %>% 
  reframe(P2A = sum(as.numeric(FGM) - as.numeric(FG3M)), 
         P2M = sum(as.numeric(FGA) - as.numeric(FG3A)), 
         P3A = sum(as.numeric(FG3A)), P3M = sum(as.numeric(FG3M)),
         FTA = sum(as.numeric(FTA)), FTM = sum(as.numeric(FTM)), 
         OREB = sum(as.numeric(OREB)), DREB = sum(as.numeric(DREB)), 
         TOV = sum(as.numeric(TOV)),
         MIN = sum(as.numeric(MIN))) 
  

out <- fourfactors(TEAM, OPP)
plot(out)
```
```{r}
selTeams <- c(2,6,10,11)
FF <- fourfactors(Tbox[selTeams,], Obox[selTeams,])
plot(FF)
```

```{r}
Tbox[selTeams,]
```

```{r}
yeah <- nba_leaguegamelog(league_id = '00', season = year_to_season(
  most_recent_nba_season() - 1))$LeagueGameLog %>% 
  separate(MATCHUP, c("OPP", "vs", "TEAM"), " ")
```


## Assist Network

```{r include = FALSE}
library(tidyverse)
library(hoopR)
library(BasketballAnalyzeR)
pbp <- load_nba_pbp(seasons = most_recent_nba_season())
player_names <- load_nba_player_box(seasons = most_recent_nba_season()) %>% 
  filter(team_location == "Boston") %>% 
  group_by(athlete_id) %>% 
  summarize(athlete_id = first(athlete_id), 
            athlete_display_name = first(athlete_display_name))
```

```{r echo=FALSE}
bos_id <- first(pbp %>% 
                  filter(home_team_abbrev == 'BOS') %>% 
                  select(home_team_id)) %>% 
  as.numeric()
bos_pbp <- pbp %>% filter(team_id == bos_id)
bos_assists <- bos_pbp %>% filter(grepl("assist", text)) 
assistee_count <- bos_assists %>%
  count(athlete_id_1)
assister_count <- bos_assists %>%
  count(athlete_id_2)
bos_assists <- bos_assists %>%
  filter(athlete_id_1 %in% 
           (assistee_count %>% arrange(desc(n)) %>% slice(1:8) %>% 
           select(athlete_id_1))[[1]],
         athlete_id_2 %in%
           (assister_count %>% arrange(desc(n)) %>% slice(1:8) %>% 
           select(athlete_id_2))[[1]])

bos_assists <- left_join(bos_assists, player_names, by = join_by(athlete_id_1 == athlete_id))
bos_assists <- left_join(bos_assists, player_names, by = join_by(athlete_id_2 ==
athlete_id))

out <- assistnet(bos_assists, "athlete_display_name.y", "athlete_display_name.x", "score_value", "type_text")
plot(out, layout="circle", edge.thr=30)
```

## Expected Points
```{r echo=FALSE}
bos_shots <- bos_pbp %>% filter(shooting_play == TRUE) %>% 
  filter(!grepl("Free Throw", type_text)) %>% 
  mutate(x = abs(coordinate_x_raw - 25), 
         y = coordinate_y_raw,
         points = score_value,
         event_type = if_else(scoring_play, "shot", "miss"),
         shot_distance = as.integer(sqrt(x**2 + y**2)))
bos_shots <- left_join(bos_shots, player_names, 
                       by = join_by(athlete_id_1 == athlete_id)) %>% 
  rename(player = athlete_display_name) 
bos_shots_subset <- subset(bos_shots, shot_distance < 35)
pl <- c("Sam Hauser", "Al Horford", "Derrick White",
        "Jaylen Brown", "Jayson Tatum", "Jrue Holiday",
        "Kristaps Porzingis", "Payton Pritchard")

mypal <- colorRampPalette(c("red", "green"))
expectedpts(data = data.frame(bos_shots_subset), players=pl, bw=10, 
            col.team="gray", palette=mypal,
            col.hline="gray")
```

## BasketballAnalyzeR: Shot Chart

```{r}
tatum_shots_subset <- bos_shots_subset %>% filter(player == "Jayson Tatum") %>% 
  mutate(coordinate_x_adj = coordinate_x_raw - 25,
    coordinate_y_adj = coordinate_y_raw - 41.75,
    result = as.factor(if_else(event_type == "shot", "made", "missed")))
shotchart(data = data.frame(tatum_shots_subset), x = "coordinate_x_adj",
          y = "coordinate_y_adj", scatter=TRUE, z = "result")
```

## BasketballAnalyzeR: Shot Chart
```{r}
library(hoopR)
library(tidyverse)
fg_pct_stats <- nba_leaguedashptteamdefend(league_id = '00', 
                           season = year_to_season(most_recent_nba_season() - 1))[[1]] %>% 
  select(TEAM_ABBREVIATION, D_FG_PCT, NORMAL_FG_PCT) %>% 
  as.data.frame()
rownames(fg_pct_stats) <- fg_pct_stats$TEAM_ABBREVIATION
fg_pct_stats <- fg_pct_stats %>% select(-TEAM_ABBREVIATION) %>% 
  mutate(D_FG_PCT = as.numeric(D_FG_PCT),
                               NORMAL_FG_PCT = as.numeric(NORMAL_FG_PCT))
```

## hoopR: Regression
```{r}
library(hoopR)
library(tidyverse)
library(factoextra)
fg_pct_stats <- nba_leaguedashptteamdefend(league_id = '00', 
                           season = year_to_season(most_recent_nba_season() - 1))[[1]] %>% 
  select(TEAM_ABBREVIATION, D_FG_PCT, NORMAL_FG_PCT) %>% 
  as.data.frame()
rownames(fg_pct_stats) <- fg_pct_stats$TEAM_ABBREVIATION
fg_pct_stats <- fg_pct_stats %>% select(-TEAM_ABBREVIATION) %>% 
  mutate(D_FG_PCT = as.numeric(D_FG_PCT),
                               NORMAL_FG_PCT = as.numeric(NORMAL_FG_PCT))
res.km <- kmeans(fg_pct_stats, centers = 3)
fviz_cluster(res.km, data = fg_pct_stats,
             palette = c("#2E9FDF", "#00AFBB", "#E7B800"), 
             geom = "text",
             ellipse.type = "convex", 
             ggtheme = theme_bw())
```


# March Madness

## What is the probability of a perfect bracket?

Hint: how many games are there in the tournament not including the First Four,
and how many possible outcomes are there for each game?

Answer: $2^{63}$ or $9,223,372,036,854,775,808$


## Ranking by some metric
We can rank the teams with some metric, then for each matchup, we predict
that the better team wins. Then we needn't care about probability.
Example:
![KenPom.](../kenpom.png)

Pros:
- We can pick the best team at each stage
Cons:
- Doesn't account for differences in playstyles

## "Probabilistic" approach
If we choose not to assume a strict ranking of teams, the
problem becomes a little more complicated. 
In other words, we do not assume transitivity of matchup outcomes:
Team A is favored against Team B and
Team B is favored against Team C doesn't imply
Team A is favored against Team C.
Pros:
- Can account for differences in playstyles
Cons:
- Not practical to compute (9,223,372,036,854,775,808 different possibilities
to consider)

## Simulation approach
We can model the number of points scored by each team with a Poisson
regression.
Pros:
- Can account for differences in playstyles


## "Upsets" approach
Without doing any analysis or coding, it 
Given some ranking, we can model whether or not an upset happens using
a logistic regression or some other binary classifier.
Pros:
- Addresses the main issue in most peoples' brackets
Cons:

Cons:

## Vibes

Pros:
- Does not take as much time
Cons:
- Lame

## The End
