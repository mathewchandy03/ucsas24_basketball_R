---
title: "Basketball Analytics with R"
author: "Mathew Chandy"
execute:
  echo: true
  format: revealjs
  embed-resources: true
---

# sportsdataverse

The SportsDataverse is a collection of R packages that can be used for a 
variety of sports. Below are the SportsDataverse packages that can be used for 
basketball analytics:

* [hoopR](https://hoopr.sportsdataverse.org)
* [wehoop](https://wehoop.sportsdataverse.org/)
* [sportyR](https://sportyr.sportsdataverse.org/)
* [oddsapiR](https://oddsapir.sportsdataverse.org/)
* [gamezoneR](https://jacklich10.github.io/gamezoneR/)

## Installing the collection
```{r message = FALSE, warning = FALSE, ouput = FALSE}
if (!requireNamespace('devtools', quietly = TRUE)){
  install.packages('devtools')
}
devtools::install_github(repo = "sportsdataverse/sportsdataverse-R")
```

## hoopR

Can be used for men's basketball analysis for the NBA and the NCAA.

### hoopR: Assist Tracker
```{r}
library(tidyverse)
library(hoopR)
tatum_id <- 
  nba_commonallplayers(
    league_id = '00', 
    season = year_to_season(most_recent_nba_season() - 1))[[1]] %>% 
  filter(DISPLAY_FIRST_LAST == 'Jayson Tatum') %>% 
  select(PERSON_ID) %>% 
  as.character()
tatum_passes <- 
  nba_playerdashptpass(
    player_id = tatum_id, 
    season = year_to_season(most_recent_nba_season() - 1))
tatum_passes_made <- tatum_passes[[1]]
tatum_passes_made[c('pass_to_last', 'pass_to_name')] <- 
  str_split_fixed(tatum_passes_made$PASS_TO, ", ", 2)
ggplot(data = tatum_passes_made, aes(x = pass_to_last, y = PASS)) +
  geom_bar(stat="identity")+
  scale_fill_brewer(palette="Paired")+
  theme_minimal() 
  
```

```{r}
tatum_passes_received <- tatum_passes[[2]]
```

## wehoop
```{r, warning = FALSE}
library(wehoop)
```

## sportyR
```{r}
library(sportyR)
```

## oddsapiR
```{r}
library(oddsapiR)
```

# March Madness
```{r}
library(hoopR)
records <- ncaa_mbb_NET_rankings()
records[c('wins', 'losses')] <- str_split_fixed(records$record, "-", 2)
records$p <- as.numeric(records$wins) / 
  (as.numeric(records$wins) + as.numeric(records$losses))
log5 <- function(p, q) p * (1 - q) / (p + q - 2 * p * q)
```


```{r}
library(data.tree)
library(treemap)
tournament23 <- load_mbb_schedule(seasons = 2023) %>% 
  filter(grepl("Men's Basketball Championship", notes_headline) & 
           !grepl("First Four", notes_headline)) %>% 
  select(notes_headline, home_abbreviation, home_conference_id, home_score, 
         home_winner, home_current_rank, home_linescores, home_records,
         away_abbreviation, away_conference_id, away_score, away_winner,
         away_current_rank, away_linescores, away_records
         ) %>% 
  mutate(final_four = case_when(grepl("Midwest", notes_headline) |
                                grepl("West", notes_headline) |
                                home_abbreviation == "CONN" & 
                                away_abbreviation == "MIA" ~ "midwest_west",
                                grepl("South", notes_headline) |
                                grepl("East", notes_headline) |
                                home_abbreviation == "SDSU" &
                                away_abbreviation == "FAU" ~ "south_east"),
         # The pairings are different for each year
         elite_eight = case_when(
                            grepl("Midwest", notes_headline) ~ "midwest",
                            grepl("South", notes_headline) ~ "south",
                            grepl("West", notes_headline) ~ "west",
                            grepl("East", notes_headline) ~ "east"),
         sweet_sixteen = ifelse(grepl("Sweet 16", notes_headline) |
                                grepl("2nd Round", notes_headline) |
                                grepl("1st Round", notes_headline),
                                case_when(
                                  home_current_rank %in% 
                                    c(1, 4, 5, 8, 9, 12) ~ 1,
                                  home_current_rank %in% 
                                    c(2, 3, 6, 7, 10, 11) ~ 2), NA),
         round_of_32 = ifelse(grepl("2nd Round", notes_headline) |
                              grepl("1st Round", notes_headline),
                              case_when(
                                 home_current_rank %in% c(1, 8, 9) ~ 1,
                                 home_current_rank %in% c(2, 7, 10) ~ 2,
                                 home_current_rank %in% c(3, 6, 11) ~ 3,
                                 home_current_rank %in% c(4, 5, 12) ~ 4), NA),
         round_of_64 = ifelse(grepl("1st Round", notes_headline),
                         home_current_rank,
                         NA)
         )


start23 <- tournament23 %>% 
  na.omit()
start23$pathString <- paste("national", 
                            start23$final_four, 
                            start23$elite_eight,
                            start23$sweet_sixteen,
                            start23$round_of_32,
                            start23$round_of_64,
                            sep = "/")
bracket <- as.Node(start23)
print(bracket, "home_abbreviation", "away_abbreviation")
```

```{r}
games23 <- load_mbb_schedule(seasons = 2023) %>% 
  filter(grepl("Men's Basketball Championship", notes_headline) &
           grepl("1st Round", notes_headline))
setdiff(c(games23$home_location, games23$away_location), tournament$School)
setdiff(tournament$School, c(games23$home_location, games23$away_location))
tournament$School <- case_when(
  tournament$School == "North Carolina State" ~ "NC State",
  tournament$School == "Texas A&Mâ€“Corpus Christi" ~ "Texas A&M-Corpus Christi",
  tournament$School == "Miami (FL)" ~ "Miami",
  tournament$School == "Texas Christian" ~ "TCU",
  .default = tournament$School)
```

```{r}
games23 <- games23 %>% 
  merge(tournament, by.x = "home_location", by.y = "School") %>% 
  merge(tournament, by.x = "away_location", by.y = "School") %>% 
  select(-c(uid:notes_type, broadcast_market:player_box)) %>% 
  mutate(log5 = log5(p.x, p.y))
```

```{r}
first_round <- games23 %>% 
  select(notes_headline, home_location, Seed.x,
         p.x, away_location, Seed.y, p.y) %>% 
  arrange(notes_headline)
  
other_rounds <- load_mbb_schedule(seasons = 2023) %>% 
  filter(grepl("Men's Basketball Championship", notes_headline) &
           !grepl("1st Round", notes_headline)) %>% 
  mutate(Seed.x = home_current_rank, p.x = NA, Seed.y = away_current_rank, 
         p.y = NA) %>% 
  select(notes_headline, home_location, Seed.x, p.x, away_location, Seed.y, p.y)
input <- rbind(first_round, other_rounds)

```


```{r}
tourney_exp_outcome <- function(home, away, prob_func) {
  for (i in 1:6)) {
    east1 <- games23 %>% 
      filter(notes_headline == 
               "Men's Basketball Championship - East Region - 1st Round")
  }
  
}
```

```{r}
asdfasdf <- other_rounds %>% select(notes_headline, Ov)
```

